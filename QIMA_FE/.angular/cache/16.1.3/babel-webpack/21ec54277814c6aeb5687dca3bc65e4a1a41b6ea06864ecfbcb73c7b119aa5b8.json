{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst BASE_URL = ['http://localhost:8080/'];\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  signup(signupRequest) {\n    return this.http.post(BASE_URL + \"sign-up\", signupRequest);\n  }\n  login(loginRequest) {\n    return this.http.post(BASE_URL + \"authenticate\", loginRequest);\n  }\n  hello() {\n    return this.http.get(BASE_URL + 'api/hello', {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  createAuthorizationHeader() {\n    const jwtToken = localStorage.getItem('JWT');\n    if (jwtToken) {\n      return new HttpHeaders().set('Authorization', 'Bearer ' + jwtToken);\n    } else {\n      console.log(\"JWT token not found in the Local Storage\");\n    }\n    return null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["HttpHeaders","BASE_URL","AuthService","constructor","http","signup","signupRequest","post","login","loginRequest","hello","get","headers","createAuthorizationHeader","jwtToken","localStorage","getItem","set","console","log","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Projetos\\QIMA_FE\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nconst BASE_URL = ['http://localhost:8080/']\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  signup(signupRequest: any): Observable<any> {\r\n    return this.http.post(BASE_URL + \"sign-up\", signupRequest)\r\n  }\r\n\r\n  login(loginRequest: any): Observable<any> {\r\n    return this.http.post(BASE_URL + \"authenticate\", loginRequest)\r\n  }\r\n\r\n  hello(): Observable<any> {\r\n    return this.http.get(BASE_URL + 'api/hello', {\r\n      headers: this.createAuthorizationHeader()\r\n    });\r\n  }\r\n\r\n  private createAuthorizationHeader() {\r\n    const jwtToken = localStorage.getItem('JWT');\r\n    if (jwtToken) {\r\n      return new HttpHeaders().set(\r\n        'Authorization', 'Bearer ' + jwtToken\r\n      )\r\n    } else {\r\n      console.log(\"JWT token not found in the Local Storage\");\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAI9D,MAAMC,QAAQ,GAAG,CAAC,wBAAwB,CAAC;AAE3C,MAGaC,WAAW;EAEtBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EACV;EAEJC,MAAMA,CAACC,aAAkB;IACvB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAACN,QAAQ,GAAG,SAAS,EAAEK,aAAa,CAAC;EAC5D;EAEAE,KAAKA,CAACC,YAAiB;IACrB,OAAO,IAAI,CAACL,IAAI,CAACG,IAAI,CAACN,QAAQ,GAAG,cAAc,EAAEQ,YAAY,CAAC;EAChE;EAEAC,KAAKA,CAAA;IACH,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAACV,QAAQ,GAAG,WAAW,EAAE;MAC3CW,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEQA,yBAAyBA,CAAA;IAC/B,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;IAC5C,IAAIF,QAAQ,EAAE;MACZ,OAAO,IAAId,WAAW,EAAE,CAACiB,GAAG,CAC1B,eAAe,EAAE,SAAS,GAAGH,QAAQ,CACtC;KACF,MAAM;MACLI,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;;IAEzD,OAAO,IAAI;EACb;;AA9BWjB,WAAW,C;mBAAXA,WAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXrB,WAAW,C;SAAXA,WAAW;EAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPxB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}